using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;


namespace HDictInduction.Console
{
    /// <summary>
    /// Interaction logic for HumanEvalivationWindow.xaml
    /// </summary>
    public partial class HumanEvalivationWindow : Window
    {
        string[] lines;
        string[] sampleLines;
        int currentIndex = 0;
        bool[] sampleResult;
        public HumanEvalivationWindow()
        {
            InitializeComponent();
            this.label_source.Content = this.label_index.Content = string.Empty;
        }

        private void button1_Click(object sender, RoutedEventArgs e)
        {
            System.Windows.Forms.OpenFileDialog of = new System.Windows.Forms.OpenFileDialog();
            of.ShowDialog();
            if (string.IsNullOrEmpty(of.FileName))
                return;
            lines = System.IO.File.ReadAllLines(of.FileName);
            this.label_source.Content = string.Format("File Name:{0}    Total pairs: {1}", System.IO.Path.GetFileName(of.FileName), lines.Length);
        }

        private void button_selectRandom_Click(object sender, RoutedEventArgs e)
        {
            int randomCount  = int.Parse(this.comboBox1.Text.ToString());
          
            if (lines == null || lines.Length == 0 || lines.Length < randomCount)
            {
                System.Windows.MessageBox.Show("Not enough items for sample selection!");
                return;
            }

            Dictionary<int, string> randomDict = new Dictionary<int, string>();
            Random random = new Random();

            int counter = 0;
            while (randomDict.Count < randomCount)
            {
                int index = -1;
                do
                {
                    index = random.Next(0, lines.Length);
                } while (randomDict.ContainsKey(index));
                randomDict.Add(index, lines[index]);
            }

            sampleLines = randomDict.Select(t => t.Value).ToArray();
            sampleResult = new bool[sampleLines.Length];
            this.label_source.Content = string.Format("Pair count: {0}  Sample count:{1}", lines.Length, sampleLines.Length);
            this.setCurrentIndex(0);
        }

        private void setCurrentIndex(int index)
        {
            this.currentIndex = index;
            this.label_u.Content = this.sampleLines[index].Split('\t')[0];
            this.label_k.Content = this.sampleLines[index].Split('\t')[1];
            this.label_index.Content = string.Format("({0}/{1})",sampleLines.Length,currentIndex+1);
        }

        private void button_Yes_Click(object sender, RoutedEventArgs e)
        {
            if (this.sampleLines == null || this.sampleLines.Length == 0)
                return;
            sampleResult[this.currentIndex] = true;
            if (this.currentIndex < sampleLines.Length - 1)
                this.setCurrentIndex(this.currentIndex + 1);
            else
                showCorrect();
        }

        private void button_no_Click(object sender, RoutedEventArgs e)
        {
            if (this.sampleLines == null || this.sampleLines.Length == 0)
                return;
            sampleResult[this.currentIndex] = false;
            if (this.currentIndex < sampleLines.Length - 1)
                this.setCurrentIndex(this.currentIndex + 1);
            else
                showCorrect();
        }

        private void showCorrect()
        {
            MessageBox.Show(string.Format("{0} correct out of {1}",sampleResult.Where(t=>t==true).Count(),sampleResult.Length));
        }
    }
}

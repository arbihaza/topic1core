using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace HDictInduction.Console.SAT
{
    public class SLink: IEquatable<SLink>, IEqualityComparer<SLink>
    {
        public Word WordPivot;
        public Word WordX;
        public bool Exists;
        public float Pr;

        public SLink(Word wordPivot, Word wordx)
        {
            WordPivot = wordPivot;
            WordX = wordx;
        }

        public bool Equals(SLink other)
        {
            return WordPivot == other.WordPivot && WordX == other.WordX;
        }

        public override bool Equals(object obj)
        {
            throw new Exception();
            return WordPivot == (obj as SLink).WordPivot && WordX == (obj as SLink).WordX;
        }

        public override string ToString()
        {
            return string.Format("[{0}] C[{1}] X[{2}]",Exists, WordPivot.Value, WordX.Value);
        }

        public bool Equals(SLink x, SLink y)
        {
            throw new Exception();
            return x.WordPivot.Equals(y.WordPivot) && x.WordX.Equals(y.WordX);
        }

        public int GetHashCode(SLink obj)
        {
            throw new Exception();
            int hash1 = obj.WordPivot.GetHashCode();
            int hash2 = obj.WordX.GetHashCode();
            int finalHash = hash1 ^ hash2;
            return finalHash != 0 ? finalHash : hash1;
        }

        public override int GetHashCode()
        {
            int hash1 = WordPivot.GetHashCode();
            int hash2 = WordX.GetHashCode();
            int finalHash = hash1 ^ hash2;
            return finalHash != 0 ? finalHash : hash1;
        }
    }
}
